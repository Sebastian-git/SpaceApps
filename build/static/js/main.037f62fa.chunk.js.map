{"version":3,"sources":["Components/SunshineGraph.js","Components/Sunshine.js","Components/Taskbar.js","Pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["SunshineGraph","HoverInfo","active","payload","label","currentValue","value","className","format","parseISO","toFixed","graphClick","a","splitData","JSON","stringify","IrradianceData","split","slice","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","data","i","substring","test","length","parseFloat","push","date","subDays","toISOString","substr","ResponsiveContainer","width","height","AreaChart","onClick","this","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","dataKey","stroke","fill","XAxis","axisLine","tickLine","tickFormatter","str","YAxis","datakey","tickCount","number","Tooltip","content","CartesianGrid","opacity","vertical","Component","Sunshine","state","temperature","updateTemperature","setState","props","setting","Fragment","prevTemperature","Taskbar","Home","setSetting","name","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.037f62fa.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport { ResponsiveContainer, AreaChart, XAxis, YAxis, Area, Tooltip, CartesianGrid } from \"recharts\"\r\nimport { format, parseISO, subDays } from \"date-fns\"\r\n\r\nimport IrradianceData from \"../data/irradiance.json\"\r\n\r\n\r\nclass SunshineGraph extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.currentValue = 70\r\n  }\r\n\r\n  HoverInfo = ({active, payload, label}) => {\r\n    if (active) {\r\n      if (this.currentValue !== payload[0].value) {\r\n        this.currentValue = (payload[0].value * 9/5 * 100) + 32\r\n      }\r\n      \r\n      return (\r\n      <div className=\"tooltip\">\r\n          <h4>{format(parseISO(label), \"eeee, d MMM, yyyy\")}</h4>\r\n          <p>{(payload[0].value.toFixed(2) * 9/5 * 100) + 32} Â°</p>\r\n      </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  graphClick = async (value) => {\r\n      //setTimeout(() => {this.props.updateTemperature(value)}, 1000)\r\n  }\r\n\r\n  render() {\r\n\r\n    let irrData = JSON.stringify(IrradianceData, null, 1)\r\n    let splitData = irrData.split(/\\r?\\n/).slice(13, 4183)\r\n\r\n    let today = new Date()\r\n    let dd = String(today.getDate()).padStart(2, '0')\r\n    let mm = String(today.getMonth() + 1).padStart(2, '0')\r\n    let yyyy = today.getFullYear()\r\n    today = yyyy + mm + dd\r\n\r\n    let value\r\n    const data = []\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      value = splitData[i].substring(16, 20)\r\n      if (!/\\d/.test(value[value.length - 1])) {\r\n        value = splitData[i].substring(16, 19)\r\n      }\r\n      value = parseFloat(value)\r\n\r\n      data.push({\r\n        date: subDays(new Date(), i).toISOString().substr(0, 20),\r\n        value: value\r\n      });\r\n    }\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"95%\" height={600} >\r\n          <AreaChart data={data} onClick={this.graphClick(this.currentValue)}>\r\n\r\n            <defs>\r\n              <linearGradient id=\"gradientColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.4} />\r\n                <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n              </linearGradient>\r\n            </defs>\r\n\r\n            <Area dataKey=\"value\" stroke=\"#2451B7\" fill=\"url(#gradientColor)\" />\r\n\r\n            <XAxis\r\n              dataKey=\"date\"\r\n              axisLine={true}\r\n              tickLine={true}\r\n              tickFormatter={(str) => {\r\n                  return \"\" \r\n              }}\r\n            />\r\n\r\n            <YAxis\r\n              datakey=\"value\"\r\n              axisLine={false}\r\n              tickLine={false}\r\n              tickCount={0}\r\n              tickFormatter={(number) => `${number.toFixed(2)}`}\r\n            />\r\n\r\n            <Tooltip content={this.HoverInfo} />\r\n\r\n            <CartesianGrid opacity={0.2} vertical={false} />\r\n            \r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SunshineGraph","import React, { Component } from \"react\"\r\n\r\nimport SunShineGraph from \"../Components/SunshineGraph.js\"\r\n\r\nimport \"./Sunshine.css\"\r\n\r\nclass Sunshine extends Component {\r\n\r\n    state = {\r\n        temperature : \"\"\r\n    }\r\n\r\n    updateTemperature = (value) => {\r\n      this.setState({\r\n        temperature : value\r\n      })\r\n    }\r\n  \r\n    render() {\r\n\r\n      if (this.props.setting === \"sunshine\") {\r\n        return (\r\n          <React.Fragment>\r\n            <div id=\"contentTop\">\r\n                <p id=\"contentTitle\"> Available Sunshine </p>\r\n                <p id=\"contentValue\"> {this.state.temperature} </p>\r\n            </div>\r\n            <div id=\"graph\">\r\n                <SunShineGraph prevTemperature={this.state.temperature} updateTemperature={this.updateTemperature} />\r\n            </div>\r\n          </React.Fragment>\r\n          )\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default Sunshine;","import React, { Component } from \"react\";\r\nimport \"./Taskbar.css\"\r\n\r\nclass Taskbar extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"tab\">\r\n          <button className=\"button\">Percipitation</button>\r\n          <button className=\"button\">Sunshine</button>\r\n          <button className=\"button\">Wind</button>\r\n        </div>\r\n\r\n        <div id=\"Percipitation\"></div>\r\n\r\n        <div id=\"Sunshine\"></div>\r\n\r\n        <div id=\"Wind\"></div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Taskbar;\r\n","import React, { Component } from \"react\"\r\nimport \"./Home.css\"\r\n\r\nimport Sunshine from \"../Components/Sunshine.js\"\r\n\r\nimport Taskbar from \"../Components/Taskbar.js\"\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n      setting : \"sunshine\"\r\n  }\r\n\r\n  setSetting = (name) => {\r\n    this.setState({\r\n      setting : name\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n    <React.Fragment>\r\n\r\n      <div id=\"wrapper\">\r\n        <div id=\"content\">\r\n          <div>\r\n            <Sunshine setting={this.state.setting} />\r\n          </div>\r\n        </div>\r\n        <div id=\"taskbarWrapper\">\r\n            <Taskbar setSetting={this.setSetting} />\r\n        </div>\r\n\r\n      </div>\r\n        \r\n    </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","import React from \"react\"\nimport Home from \"./Pages/Home\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}