{"version":3,"sources":["Components/SunshineGraph.js","Components/HoverInfo.js","Components/Sunshine.js","Components/Taskbar.js","Pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["value","HoverInfo","active","payload","label","className","format","parseISO","toFixed","splitData","JSON","stringify","IrradianceData","split","slice","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","console","log","substring","data","i","test","length","parseFloat","push","date","subDays","toISOString","substr","Graph","ResponsiveContainer","width","height","AreaChart","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","dataKey","stroke","fill","XAxis","axisLine","tickLine","tickFormatter","str","YAxis","datakey","tickCount","number","Tooltip","content","CartesianGrid","opacity","vertical","Sunshine","state","this","props","setting","Fragment","updateTemperature","Component","Taskbar","Home","setSetting","name","setState","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1350a136.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { ResponsiveContainer, AreaChart, XAxis, YAxis, Area, Tooltip, CartesianGrid } from \"recharts\";\r\nimport { subDays } from \"date-fns\";\r\n\r\nimport HoverInfo from \"./HoverInfo\"\r\nimport IrradianceData from \"../data/irradiance.json\"\r\n\r\nlet irrData = JSON.stringify(IrradianceData, null, 1)\r\nlet splitData = irrData.split(/\\r?\\n/).slice(13, 4183)\r\n\r\nlet today = new Date();\r\nlet dd = String(today.getDate()).padStart(2, '0');\r\nlet mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nlet yyyy = today.getFullYear();\r\ntoday = yyyy + mm + dd;\r\n\r\nconsole.log(\"date: \", splitData[0].substring(1, 15))\r\nconsole.log(\"value: \", splitData[0].substring(16, 20))\r\n\r\nlet value\r\nconst data = []\r\n\r\nfor (let i = 0; i < 7; i++) {\r\n  value = splitData[i].substring(16, 20)\r\n  if (!/\\d/.test(value[value.length - 1])) {\r\n    value = splitData[i].substring(16, 19)\r\n  }\r\n  value = parseFloat(value)\r\n\r\n  data.push({\r\n    date: subDays(new Date(), i).toISOString().substr(0, 20),\r\n    value: value\r\n  });\r\n}\r\n\r\nexport default function Graph() {\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"95%\" height={600}>\r\n      <AreaChart data={data}>\r\n\r\n        <defs>\r\n          <linearGradient id=\"gradientColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n            <stop offset=\"0%\" stopColor=\"#2451B7\" stopOpacity={0.4} />\r\n            <stop offset=\"90%\" stopColor=\"#2451B7\" stopOpacity={0.05} />\r\n          </linearGradient>\r\n        </defs>\r\n\r\n        <Area dataKey=\"value\" stroke=\"#2451B7\" fill=\"url(#gradientColor)\" />\r\n\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          axisLine={true}\r\n          tickLine={true}\r\n          tickFormatter={(str) => {\r\n              return \"\" \r\n          }}\r\n        />\r\n\r\n        <YAxis\r\n          datakey=\"value\"\r\n          axisLine={false}\r\n          tickLine={false}\r\n          tickCount={0}\r\n          tickFormatter={(number) => `${number.toFixed(2)}`}\r\n        />\r\n\r\n        <Tooltip content={<HoverInfo />} />\r\n\r\n        <CartesianGrid opacity={0.2} vertical={false} />\r\n        \r\n      </AreaChart>\r\n    </ResponsiveContainer>\r\n  );\r\n}","import { format, parseISO } from \"date-fns\";\r\n\r\nconst HoverInfo = ( { active, payload, label }) => {\r\n    if (active) {\r\n        return (\r\n        <div className=\"tooltip\">\r\n            <h4>{format(parseISO(label), \"eeee, d MMM, yyyy\")}</h4>\r\n            <p>{(payload[0].value.toFixed(2) * 9/5 * 100) + 32} Â°</p>\r\n        </div>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default HoverInfo","import React, { Component } from \"react\"\r\n\r\nimport SunShineGraph from \"../Components/SunshineGraph.js\"\r\n\r\nimport \"./Sunshine.css\"\r\n\r\nclass Sunshine extends Component {\r\n\r\n    state = {\r\n    }\r\n\r\n  \r\n    render() {\r\n\r\n      if (this.props.setting === \"sunshine\") {\r\n        return (\r\n          <React.Fragment>\r\n            <div id=\"contentTop\">\r\n                <p id=\"contentTitle\"> Available Sunshine </p>\r\n            </div>\r\n            <div id=\"graph\">\r\n                <SunShineGraph updateTemperature={this.updateTemperature} />\r\n            </div>\r\n          </React.Fragment>\r\n          )\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default Sunshine;","//import sunshineImage from '../imgs/name'\r\n\r\nimport React, { Component } from \"react\"\r\n\r\nclass Taskbar extends Component {\r\n    render() {\r\n        return (\r\n\r\n            // <img class=\"taskbarChild\" src={sunshineImage} alt=\"Sunshine\" onClick={() => this.props.setSetting(\"sunshine\")} />\r\n\r\n            // <img class=\"taskbarChild\" src={sunshineImage} alt=\"Sunshine\" onClick={() => this.props.setSetting(\"sunshine\")} />\r\n\r\n            // <img class=\"taskbarChild\" src={sunshineImage} alt=\"Sunshine\" onClick={() => this.props.setSetting(\"sunshine\")} />\r\n\r\n            <React.Fragment>\r\n                \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Taskbar;","import React, { Component } from \"react\"\r\nimport \"./Home.css\"\r\n\r\nimport Sunshine from \"../Components/Sunshine.js\"\r\n\r\nimport Taskbar from \"../Components/Taskbar.js\"\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n      setting : \"sunshine\"\r\n  }\r\n\r\n  setSetting = (name) => {\r\n    this.setState({\r\n      setting : name\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n    <React.Fragment>\r\n\r\n      <div id=\"wrapper\">\r\n        <div id=\"content\">\r\n          <div>\r\n            <Sunshine setting={this.state.setting} />\r\n          </div>\r\n        </div>\r\n        <div id=\"taskbarWrapper\">\r\n          <Taskbar setSetting={this.setSetting} />\r\n        </div>\r\n\r\n      </div>\r\n        \r\n    </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Home;","import React from \"react\"\nimport Home from \"./Pages/Home\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}